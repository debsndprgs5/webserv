
1 client class 
    keep std::string content;
    bool isfull;

int    client::isBufferFull(){
    //check for EOF at end of content;    
}


    Process::HandleData()
//ici on a un fd de pollfd, it est pas client
//il faut trouver client avec pollfd depuis _MappedClient[it.fd]
    bytesRecv= recve(buffer, buffer_size,0)
    if bytesRecv{
        it.content += buffer;
        if(it.content.size() > it.currentServ.getclient_max_body_size())
            DataHandler(currentClient, 404);
        if(it.isBufferFull())//Call the DataHandler
        {
            DataHandler(current client) data;
        }  
    }


Principe de DataHandler;
Add POLL_HUP check ??

class DataHandler{

    private : 
    Client &currentClient;//client but also serv trough it
    int ret;//return status 
    std::string reponse;//Full response with neader/body blablablabla
    std::string reponse_content//only for get request or cgi, it's only the body
    std::string requestedMethod;
    std::string requestedUriPath;//"Fragmented"(if from nested loc) path;
    std::string absolutePath;//Defragmented path replacing host by root ? 
    std::string body;...
    //Headers, body all variables for http request 
    bool isMethodsAllowed(std::vector<string> methods);//First check for serv methods then location
    int findMethod();
    bool findLocation()//C++ magic trick to fill absolutePath from requested loc(check in nested too)
    int myGet();//opens a file, fill reponse_content, set ret;
    int myPost();//creates a file 
    int myDelete(); //delete a file
    void buildresponse();//check for requested method then build and send response 
    
    public:
    DataHandler(Client current)//Will then check the buffer and process data
    DataHandler(Client current, int ret)//Error occurs before, Map errors from server conf and send back 
};

here  I want the constructor to deal all and call send() to
Somehow I have to let some place for cgi checking



	